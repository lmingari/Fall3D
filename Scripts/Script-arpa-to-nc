#!/bin/csh
#--------------------------------------------------------------------------
#   Script to convert ARPA grib1 files to netCDF.
#
#   Requires:
#     - wgrib and the utility program Grib2nc
#   Format:
#     - GRIB1
#   Pressure levels:
#     - Depends on the model configuration (see arpa.configure file)
#   Comments:
#     - ARPA gives a single grib file with 72h forecast
#
#--------------------------------------------------------------------------
#
# File: Scripts/Script-arpa-to-nc.  Generated from Script-arpa-to-nc.in by configure.
#
set SCRIPTNAM=Script-arpa-to-nc
set EXEPROG=Grib2nc
set wgrib=NOTFOUND                         # Path to the of the wgrib executable
set prefix=/home/mingari/Fall3d
set exec_prefix=${prefix}
set EXEPATH=${exec_prefix}/bin/$EXEPROG             # Path of the executable
set RUNDIR=/home/mingari/Fall3d/Runs
set DATADIR=/home/mingari/Fall3d/Data
set VER=7.0
set PROBLEMNAME=$1
set GRIBCONFDIR=/home/mingari/Fall3d/Utilities/Grib2nc/config
#
########################################################################
#
#    ************** USER DEFINED PARAMETERS ******************
#
#  List of timesteps to decode
#
set tmax=24    # forecast goes from zero to tmax (up to 72h) , increment 1h
#
#  Domain resolution. Values are used to
#  modify the file arpa.configure accordingly
#
set nx=154
set ny=121
#
#  File names and paths
#
set Gribcnf=${GRIBCONFDIR}/arpa.configure                # Model configure file
set GRIBNAME=${DATADIR}/arpa-grib/${PROBLEMNAME}.grib    # Original arpa grib1 file
set NCNAME=${DATADIR}/arpa-nc/${PROBLEMNAME}.arpa.nc     # arpa nc output file
set LOGNAME=${DATADIR}/arpa-nc/Grib2nc.log               # Grib2nc log output file
#
#  You don't need to change anything below this line
#
#############################################################
#
if ( ${PROBLEMNAME} == '' ) then
  echo 'Usage: '${SCRIPTNAM}' PROBLEMNAME'
  exit
else
  echo ' '
  echo '*** Launching '${SCRIPTNAM}' for '${PROBLEMNAME}' ***'
  echo ' '
endif
#
if ( ! -r ${Gribcnf} ) then
  echo 'Error: cannot open file:' ${Gribcnf}
  exit
endif
#
set TMP=${DATADIR}/arpa-tmp         # tmp folder
set format=-bin                     # -bin or -text
#
#  1. Decoding using wgrib
#
#  1.1. Creates the temporary folder
#
if( -d ${TMP} ) then
  rm -r ${TMP}
endif
mkdir ${TMP}
#
#   1.2. Creates the inventory file
#
set inv_file=${TMP}/all.inv
${wgrib} -s ${GRIBNAME} > ${inv_file}
#
#   1.3. Extract the date YYMMDDHH from first record
#
set date=`grep '1:0:' ${inv_file} | awk '{ \
     date=substr($0,7,8); \
     print date; }'`
#
#   1.4. Decode variables form 0hr to 72hr (ARPA interval)
#
set run_wgrib=1
if( ${run_wgrib} == 1 ) then

set time=0
#
while( ${time} < ${tmax} )
#                                  2D variables
  foreach var ( RLON RLAT U:10 V:10 T:2 PS FI:sfc T:sfc )
     set OUTPUT=${TMP}/${var}.${time}
     if( ${var} == RLON) then
       set var = "RLON:"
       set var2 = "sfc"
     else if( ${var} == RLAT) then
       set var = "RLAT:"
       set var2 = "sfc"
     else if( ${var} == U:10) then
       set var = "U:"
       set var2 = "10 m above gnd"
     else if( ${var} == V:10) then
       set var = "V:"
       set var2 = "10 m above gnd"
     else if( ${var} == T:2) then
       set var = "T:"
       set var2 = "2 m above gnd"
     else if( ${var} == PS) then
       set var = "PS:"
       set var2 = "sfc"
     else if( ${var} == FI:sfc) then
       set var = "FI:"
       set var2 = "sfc"
     else if( ${var} == T:sfc) then
       set var = "T:"
       set var2 = "sfc"
     endif
     if( ${time} == 0) then
        grep ":${var}" ${inv_file} | grep "${var2}" | grep ":anl" | ${wgrib} -i ${GRIBNAME} ${format} -o ${OUTPUT}
     else
        grep ":${var}" ${inv_file} | grep "${var2}" | grep ":${time}hr" | ${wgrib} -i ${GRIBNAME} ${format} -o ${OUTPUT}
     endif
  end
#                                 3D variables
  foreach var ( T U V OMEGA FI QV )
    foreach lev ( 50 100 150 200 250 300 350 400 450 500 550 600 650 700 750 800 850 900 925 950 1000 1050 )
        set OUTPUT=${TMP}/${var}.${time}.${lev}
        if( ${time} == 0) then
          grep ":${var}:${lev} mb" ${inv_file} | grep ":anl" | ${wgrib} -i ${GRIBNAME} ${format} -o ${OUTPUT}
        else
          grep ":${var}:${lev} mb" ${inv_file} | grep ":${time}hr" | ${wgrib} -i ${GRIBNAME} ${format} -o ${OUTPUT}
        endif
    end
  end
#
  set time=`expr ${time} + 1`
end
endif          # end of run_wgrib
#
#  2. Runs Grib2nc
#
#  Gets the number of steps and modifies the eraIn.configure accordingly
#
set nt=-1
set time=0
while( ${time} < ${tmax} )
  set nt=`expr ${nt} + 1`
  set time=`expr ${time} + 1`
end
set GribcnfTMP=${Gribcnf}.tmp
cat ${Gribcnf} | awk -v nt2="$nt" -v nx2="$nx" -v ny2="$ny" '{ \
    if(index($0,"! subset nx")!=0)     {print "nx "nx2"         ! subset nx"} \
    else if(index($0,"! subset ny")!=0)     {print "ny "ny2"    ! subset ny"} \
    else if(index($0,"! Number of time steps")!=0) {print "nt "nt2"        ! Number of time steps"} \
    else {print $0} \
    }' > ${GribcnfTMP}
mv ${GribcnfTMP} ${Gribcnf}
#
set run_Grib2nc=1
if( ${run_Grib2nc} == 1 ) then
  ${EXEPATH} ${date} ${LOGNAME} ${Gribcnf} ${NCNAME} ${TMP} arpa
endif
#
#  3. Removes the TMP folder
#
rm -rf ${TMP}
